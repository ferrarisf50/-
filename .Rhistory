67.3*23+24.3
(1615.8-67.3*23+24.3)
(1615.8-67.3*23-24.3)
27*0.9
library(xlsx)
setwd("C:/Users/ferra/Desktop/My project/Sanguosha_ranking")
test1<- read.xlsx("test.xlsx",sheetIndex=2,header=TRUE,encoding="UTF-8");
test1<- test1[,3:5]
test2<- read.xlsx("test.xlsx",sheetIndex=3,header=TRUE,encoding="UTF-8");
test2<- test2[,3:5]
test3<- read.xlsx("test.xlsx",sheetIndex=4,header=TRUE,encoding="UTF-8");
test3<- test3[,3:5]
test4<- read.xlsx("test.xlsx",sheetIndex=5,header=TRUE,encoding="UTF-8");
test4<- test4[,3:5]
test5<- read.xlsx("test.xlsx",sheetIndex=6,header=TRUE,encoding="UTF-8");
test5<- test5[,3:5]
test6<- read.xlsx("test.xlsx",sheetIndex=7,header=TRUE,encoding="UTF-8");
test6<- test6[,3:5]
test7<- read.xlsx("test.xlsx",sheetIndex=8,header=TRUE,encoding="UTF-8");
test7<- test7[,3:5]
test <- na.omit(rbind(test1,test2,test3,test4,test5,test6,test7))
warrior<- read.xlsx("test.xlsx",sheetIndex=1,header=TRUE,encoding="UTF-8");   ##读取武将编号文件
n_warrior <- 224
n_game <- nrow(test)
count_m <- matrix(data=0,n_warrior,n_warrior)   ## 武将i对阵武将j先手胜场数
total_m <- matrix(data=0,n_warrior,n_warrior)    ## 武将i对阵武将j先手场数
tran1_m <- matrix(data=0,n_warrior,n_warrior)     ## 转移矩阵
empty_m <- matrix(data=0,n_warrior,n_warrior)      ##武将i与武将j是否已经交手
for (i in 1:n_game) {        ##读取对战记录
total_m[test[i,2],test[i,3]] <- total_m[test[i,2],test[i,3]]+1
if (test[i,1]==1) count_m[test[i,2],test[i,3]]<- count_m[test[i,2],test[i,3]]+1
}
for (i in 1:n_warrior)
{
for (j in 1:n_warrior)
{
if (i!=j)
{
if (total_m[i,j]!=0 && total_m[j,i]!=0)
tran1_m[i,j] <- 0.5*(1-(count_m[i,j]/total_m[i,j]))+   0.5*(count_m[j,i]/total_m[j,i])
else if ( total_m[i,j]!=0 && total_m[j,i]==0)
{
tran1_m[i,j] <- 0.5*(1-(count_m[i,j]/total_m[i,j]))+ 0.5* ( 1-(count_m[i,j]/total_m[i,j])^2)
tran1_m[j,i] <- 0.5*(1-sqrt(1-(count_m[i,j]/total_m[i,j])))+ 0.5* ( (count_m[i,j]/total_m[i,j]))
}
else  empty_m[i,j] <- 1
}
else tran1_m[i,j] <-0
}
}
colnames(tran1_m) <- warrior[,1]
rownames(tran1_m) <- warrior[,1]
temp<-tran1_m[]
for (i in 1:n_warrior)
{
for (j in 1:n_warrior)
{
if (i!=j)
tran1_m[i,j] <- tran1_m[i,j]/(n_warrior-1-sum(empty_m[i,]))
}
tran1_m[i,i] <- 1-sum(tran1_m[i,])
}
library(markovchain)      ##调用markovchain package
chain_m<-new("markovchain",transitionMatrix=tran1_m)    ## 定义markov链
rank_v <- steadyStates(chain_m)          ## 求稳定状态概率
rr <-order(rank_v[2,],decreasing = FALSE)   ##稳定概率最终排名
cbind(c(1:nrow(warrior)),warrior[rr,])
ranking <- warrior[rr,]
#前n名再进行排名
r1 <- rr[1:50]
n_warrior1=50
warrior2<-warrior[r1,]
tran2_m<-temp[r1,r1]
for (i in 1:n_warrior1)
{
for (j in 1:n_warrior1)
{
if (i!=j)
tran2_m[i,j] <- tran2_m[i,j]/(n_warrior1-1-sum(empty_m[i,]))
}
tran2_m[i,i] <- 1-sum(tran2_m[i,])
}
chain2_m<-new("markovchain",transitionMatrix=tran2_m)
rank2_v <- steadyStates(chain2_m)          ## 求稳定状态概率
rr2 <-order(rank2_v[1,],decreasing = TRUE)   ##稳定概率最终排名
ranking2 <- warrior2[rr2,]
r1 <- r1[1:50]
r1 <- r1[1:20]
n_warrior1=20
warrior2<-warrior[r1,]
tran2_m<-temp[r1,r1]
for (i in 1:n_warrior1)
{
for (j in 1:n_warrior1)
{
if (i!=j)
tran2_m[i,j] <- tran2_m[i,j]/(n_warrior1-1-sum(empty_m[i,]))
}
tran2_m[i,i] <- 1-sum(tran2_m[i,])
}
chain2_m<-new("markovchain",transitionMatrix=tran2_m)
rank2_v <- steadyStates(chain2_m)          ## 求稳定状态概率
rr2 <-order(rank2_v[1,],decreasing = TRUE)   ##稳定概率最终排名
ranking2 <- warrior2[rr2,]
View(warrior2)
r1 <- r1[1:10]
n_warrior1=10
warrior2<-warrior[r1,]
tran2_m<-temp[r1,r1]
for (i in 1:n_warrior1)
{
for (j in 1:n_warrior1)
{
if (i!=j)
tran2_m[i,j] <- tran2_m[i,j]/(n_warrior1-1-sum(empty_m[i,]))
}
tran2_m[i,i] <- 1-sum(tran2_m[i,])
}
chain2_m<-new("markovchain",transitionMatrix=tran2_m)
rank2_v <- steadyStates(chain2_m)          ## 求稳定状态概率
rr2 <-order(rank2_v[1,],decreasing = TRUE)   ##稳定概率最终排名
ranking2 <- warrior2[rr2,]
View(ranking2)
r1 <- rr[1:50]
n_warrior1=50
warrior2<-warrior[r1,]
tran2_m<-temp[r1,r1]
for (i in 1:n_warrior1)
{
for (j in 1:n_warrior1)
{
if (i!=j)
tran2_m[i,j] <- tran2_m[i,j]/(n_warrior1-1-sum(empty_m[i,]))
}
tran2_m[i,i] <- 1-sum(tran2_m[i,])
}
chain2_m<-new("markovchain",transitionMatrix=tran2_m)
rank2_v <- steadyStates(chain2_m)          ## 求稳定状态概率
rr2 <-order(rank2_v[1,],decreasing = TRUE)   ##稳定概率最终排名
ranking2 <- warrior2[rr2,]
rr
View(warrior2)
View(ranking2)
r1 <- rr[1:4]
n_warrior1=4
warrior2<-warrior[r1,]
tran2_m<-temp[r1,r1]
for (i in 1:n_warrior1)
{
for (j in 1:n_warrior1)
{
if (i!=j)
tran2_m[i,j] <- tran2_m[i,j]/(n_warrior1-1-sum(empty_m[i,]))
}
tran2_m[i,i] <- 1-sum(tran2_m[i,])
}
chain2_m<-new("markovchain",transitionMatrix=tran2_m)
rank2_v <- steadyStates(chain2_m)          ## 求稳定状态概率
rr2 <-order(rank2_v[1,],decreasing = TRUE)   ##稳定概率最终排名
ranking2 <- warrior2[rr2,]
r1
View(warrior2)
warrior2<-warrior[r1,]
tran2_m<-temp[r1,r1]
for (i in 1:n_warrior1)
{
for (j in 1:n_warrior1)
{
if (i!=j)
tran2_m[i,j] <- tran2_m[i,j]/(n_warrior1-1-sum(empty_m[i,]))
}
tran2_m[i,i] <- 1-sum(tran2_m[i,])
}
View(tran2_m)
for (i in 1:n_warrior1)
{
for (j in 1:n_warrior1)
{
if (i!=j)
tran2_m[i,j] <- tran2_m[i,j]/(n_warrior1-1-sum(empty_m[i,]))
}
tran2_m[i,i] <- 1-sum(tran2_m[i,])
}
r1 <- rr[1:4]
n_warrior1=4
warrior2<-warrior[r1,]
tran2_m<-temp[r1,r1]
for (i in 1:n_warrior1)
{
for (j in 1:n_warrior1)
{
if (i!=j)
tran2_m[i,j] <- tran2_m[i,j]/(n_warrior1-1-sum(empty_m[i,]))
}
tran2_m[i,i] <- 1-sum(tran2_m[i,])
}
View(tran2_m)
r1 <- rr[1:4]
n_warrior1=4
warrior2<-warrior[r1,]
tran2_m<-temp[r1,r1]
View(tran2_m)
n_warrior <- 224
n_game <- nrow(test)
count_m <- matrix(data=0,n_warrior,n_warrior)   ## 武将i对阵武将j先手胜场数
total_m <- matrix(data=0,n_warrior,n_warrior)    ## 武将i对阵武将j先手场数
tran1_m <- matrix(data=0,n_warrior,n_warrior)     ## 转移矩阵
empty_m <- matrix(data=0,n_warrior,n_warrior)      ##武将i与武将j是否已经交手
for (i in 1:n_game) {        ##读取对战记录
total_m[test[i,2],test[i,3]] <- total_m[test[i,2],test[i,3]]+1
if (test[i,1]==1) count_m[test[i,2],test[i,3]]<- count_m[test[i,2],test[i,3]]+1
}
for (i in 1:n_warrior)
{
for (j in 1:n_warrior)
{
if (i!=j)
{
if (total_m[i,j]!=0 && total_m[j,i]!=0)
tran1_m[i,j] <- 0.5*(1-(count_m[i,j]/total_m[i,j]))+   0.5*(count_m[j,i]/total_m[j,i])
else if ( total_m[i,j]!=0 && total_m[j,i]==0)
{
tran1_m[i,j] <- 0.5*(1-(count_m[i,j]/total_m[i,j]))+ 0.5* ( 1-(count_m[i,j]/total_m[i,j])^2)
tran1_m[j,i] <- 0.5*(1-sqrt(1-(count_m[i,j]/total_m[i,j])))+ 0.5* ( (count_m[i,j]/total_m[i,j]))
}
else  empty_m[i,j] <- 1
}
else tran1_m[i,j] <-0
}
}
colnames(tran1_m) <- warrior[,1]
rownames(tran1_m) <- warrior[,1]
temp<-tran1_m
temp2<-empty_m
for (i in 1:n_warrior)
{
for (j in 1:n_warrior)
{
if (i!=j)
tran1_m[i,j] <- tran1_m[i,j]/(n_warrior-1-sum(empty_m[i,]))
}
tran1_m[i,i] <- 1-sum(tran1_m[i,])
}
r1 <- rr[1:4]
n_warrior1=4
warrior2<-warrior[r1,]
tran2_m<-temp[r1,r1]
empty2_m<temp2[r1,r1]
empty2_m<-temp2[r1,r1]
View(empty2_m)
for (i in 1:n_warrior1)
{
for (j in 1:n_warrior1)
{
if (i!=j)
tran2_m[i,j] <- tran2_m[i,j]/(n_warrior1-1-sum(empty2_m[i,]))
}
tran2_m[i,i] <- 1-sum(tran2_m[i,])
}
View(tran2_m)
chain2_m<-new("markovchain",transitionMatrix=tran2_m)
rank2_v <- steadyStates(chain2_m)          ## 求稳定状态概率
rr2 <-order(rank2_v[1,],decreasing = TRUE)   ##稳定概率最终排名
ranking2 <- warrior2[rr2,]
View(ranking2)
r1 <- rr[1:50]
n_warrior1=4
warrior2<-warrior[r1,]
tran2_m<-temp[r1,r1]
empty2_m<-temp2[r1,r1]
for (i in 1:n_warrior1)
{
for (j in 1:n_warrior1)
{
if (i!=j)
tran2_m[i,j] <- tran2_m[i,j]/(n_warrior1-1-sum(empty2_m[i,]))
}
tran2_m[i,i] <- 1-sum(tran2_m[i,])
}
chain2_m<-new("markovchain",transitionMatrix=tran2_m)
rank2_v <- steadyStates(chain2_m)          ## 求稳定状态概率
rr2 <-order(rank2_v[1,],decreasing = TRUE)   ##稳定概率最终排名
ranking2 <- warrior2[rr2,]
r1 <- rr[1:50]
n_warrior1=50
warrior2<-warrior[r1,]
tran2_m<-temp[r1,r1]
empty2_m<-temp2[r1,r1]
for (i in 1:n_warrior1)
{
for (j in 1:n_warrior1)
{
if (i!=j)
tran2_m[i,j] <- tran2_m[i,j]/(n_warrior1-1-sum(empty2_m[i,]))
}
tran2_m[i,i] <- 1-sum(tran2_m[i,])
}
chain2_m<-new("markovchain",transitionMatrix=tran2_m)
rank2_v <- steadyStates(chain2_m)          ## 求稳定状态概率
rr2 <-order(rank2_v[1,],decreasing = TRUE)   ##稳定概率最终排名
ranking2 <- warrior2[rr2,]
View(ranking2)
r1 <- rr[1:20]
n_warrior1=20
warrior2<-warrior[r1,]
tran2_m<-temp[r1,r1]
empty2_m<-temp2[r1,r1]
for (i in 1:n_warrior1)
{
for (j in 1:n_warrior1)
{
if (i!=j)
tran2_m[i,j] <- tran2_m[i,j]/(n_warrior1-1-sum(empty2_m[i,]))
}
tran2_m[i,i] <- 1-sum(tran2_m[i,])
}
chain2_m<-new("markovchain",transitionMatrix=tran2_m)
rank2_v <- steadyStates(chain2_m)          ## 求稳定状态概率
rr2 <-order(rank2_v[1,],decreasing = TRUE)   ##稳定概率最终排名
ranking2 <- warrior2[rr2,]
View(ranking2)
View(tran2_m)
r1 <- rr[1:10]
n_warrior1=10
warrior2<-warrior[r1,]
tran2_m<-temp[r1,r1]
empty2_m<-temp2[r1,r1]
for (i in 1:n_warrior1)
{
for (j in 1:n_warrior1)
{
if (i!=j)
tran2_m[i,j] <- tran2_m[i,j]/(n_warrior1-1-sum(empty2_m[i,]))
}
tran2_m[i,i] <- 1-sum(tran2_m[i,])
}
chain2_m<-new("markovchain",transitionMatrix=tran2_m)
rank2_v <- steadyStates(chain2_m)          ## 求稳定状态概率
rr2 <-order(rank2_v[1,],decreasing = TRUE)   ##稳定概率最终排名
ranking2 <- warrior2[rr2,]
View(ranking2)
r1 <- rr[1:50]
n_warrior1=50
warrior2<-warrior[r1,]
tran2_m<-temp[r1,r1]
empty2_m<-temp2[r1,r1]
for (i in 1:n_warrior1)
{
for (j in 1:n_warrior1)
{
if (i!=j)
tran2_m[i,j] <- tran2_m[i,j]/(n_warrior1-1-sum(empty2_m[i,]))
}
tran2_m[i,i] <- 1-sum(tran2_m[i,])
}
chain2_m<-new("markovchain",transitionMatrix=tran2_m)
rank2_v <- steadyStates(chain2_m)          ## 求稳定状态概率
rr2 <-order(rank2_v[1,],decreasing = TRUE)   ##稳定概率最终排名
ranking2 <- warrior2[rr2,]
View(ranking2)
r1 <- r1[1:20]
n_warrior1=20
warrior2<-warrior[r1,]
tran2_m<-temp[r1,r1]
empty2_m<-temp2[r1,r1]
for (i in 1:n_warrior1)
{
for (j in 1:n_warrior1)
{
if (i!=j)
tran2_m[i,j] <- tran2_m[i,j]/(n_warrior1-1-sum(empty2_m[i,]))
}
tran2_m[i,i] <- 1-sum(tran2_m[i,])
}
chain2_m<-new("markovchain",transitionMatrix=tran2_m)
rank2_v <- steadyStates(chain2_m)          ## 求稳定状态概率
rr2 <-order(rank2_v[1,],decreasing = TRUE)   ##稳定概率最终排名
ranking2 <- warrior2[rr2,]
View(warrior2)
r1 <- r1[1:10]
n_warrior1=10
warrior2<-warrior[r1,]
tran2_m<-temp[r1,r1]
empty2_m<-temp2[r1,r1]
for (i in 1:n_warrior1)
{
for (j in 1:n_warrior1)
{
if (i!=j)
tran2_m[i,j] <- tran2_m[i,j]/(n_warrior1-1-sum(empty2_m[i,]))
}
tran2_m[i,i] <- 1-sum(tran2_m[i,])
}
chain2_m<-new("markovchain",transitionMatrix=tran2_m)
rank2_v <- steadyStates(chain2_m)          ## 求稳定状态概率
rr2 <-order(rank2_v[1,],decreasing = TRUE)   ##稳定概率最终排名
ranking2 <- warrior2[rr2,]
View(ranking2)
r1 <- r1[1:9]
n_warrior1=9
warrior2<-warrior[r1,]
tran2_m<-temp[r1,r1]
empty2_m<-temp2[r1,r1]
for (i in 1:n_warrior1)
{
for (j in 1:n_warrior1)
{
if (i!=j)
tran2_m[i,j] <- tran2_m[i,j]/(n_warrior1-1-sum(empty2_m[i,]))
}
tran2_m[i,i] <- 1-sum(tran2_m[i,])
}
chain2_m<-new("markovchain",transitionMatrix=tran2_m)
rank2_v <- steadyStates(chain2_m)          ## 求稳定状态概率
rr2 <-order(rank2_v[1,],decreasing = TRUE)   ##稳定概率最终排名
ranking2 <- warrior2[rr2,]
View(warrior2)
r1 <- r1[1:8]
n_warrior1=8
warrior2<-warrior[r1,]
tran2_m<-temp[r1,r1]
empty2_m<-temp2[r1,r1]
for (i in 1:n_warrior1)
{
for (j in 1:n_warrior1)
{
if (i!=j)
tran2_m[i,j] <- tran2_m[i,j]/(n_warrior1-1-sum(empty2_m[i,]))
}
tran2_m[i,i] <- 1-sum(tran2_m[i,])
}
chain2_m<-new("markovchain",transitionMatrix=tran2_m)
rank2_v <- steadyStates(chain2_m)          ## 求稳定状态概率
rr2 <-order(rank2_v[1,],decreasing = TRUE)   ##稳定概率最终排名
ranking2 <- warrior2[rr2,]
View(warrior2)
